" vim:fdm=marker
set nocompatible
filetype plugin indent on

" GUI options {{{
set number
syntax enable

" colorscheme solarized
set background=dark
" set background=light
" set laststatus=2 " always show the statusline

" Set some sensible diff colours.
" Seriously, the defaults are not easy to comprehend.
" Additions are are dark green
highlight DiffAdd ctermbg=22
" Deleted lines are dark grey
highlight DiffDelete ctermbg=233
" Modified lines are dark grey
highlight DiffChange ctermbg=233
" Modified words are a slightly lighter grey
highlight DiffText ctermbg=236

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_powerline_fonts = 1

" }}}

" Buffer Options {{{
" set hidden   " Buffers can be hidden and edited
" set autoread " Automatically load changes to open files
" }}}

" Formatting and indentation {{{
" Use spaces instead of tabs
set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
set ts=2 sw=2 expandtab
set smarttab
filetype indent plugin on
set autoindent
" }}}

" Editing and text display {{{
set backspace=indent,eol,start
" set showmatch
" Make Y consistent with C and D.  See :help Y.
nnoremap Y y$
" Always show at least one line above/below the cursor
set scrolloff=1
set sidescrolloff=5
set display+=lastline
" Make whitespace visable
set list
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if &termencoding ==# 'utf-8' || &encoding ==# 'utf-8'
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  endif
endif
" Timeout options for commands
set ttimeout
set ttimeoutlen=0
" Highlight 80th column to indicate code should not be at/past that point
" default max width to 80 chars, but dont autowrap when typing.
" set textwidth=79 wrapmargin=0
" set colorcolumn=+1
" highlight ColorColumn ctermbg=Black
set formatoptions+=j " see :h fo-table
" set cursorline
" }}}

" Searching {{{
set hlsearch
set incsearch
set ignorecase
set smartcase
" ag is much faster than grep, and reads .gitignore
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --column\ $*
  set grepformat=%f:%l:%c:%m"
" If this is a git directory, use git's grep
elseif !empty(system("git rev-parse --show-toplevel"))
  set grepprg=git\ grep\ --line-number\ $*
endif
" }}}

" Autocomplete {{{
 set complete=.,b,u,]
 set wildmode=longest,list:longest
 set completeopt=menu,preview
" }}}

" Swap files {{{
" set backupdir=~/.vim/swp-files
" set directory=~/.vim/swp-files
" set shortmess+=A
" set backupskip=/tmp/*,/private/tmp/*
" }}}

" TOhtml settings {{{
let g:html_number_lines = 1
" let g:html_dynamic_folds = 0
" let g:html_no_foldcolumn = 1
let g:html_prevent_copy = "n"
" }}}

" Undo {{{
set undolevels=10000
" if has("persistent_undo")
set undodir=~/.vim/undo " Allow undoes to persist even after a file is closed
set undofile
" endif
" }}}

" set clipboard+=unnamed
" Include - as part of a word definition. For example, viw will select the
" entire word of 'this-is-hyphened'
set iskeyword+=-

" Previous Diego's config {{{

let mapleader = ","  "sets up the leader for all maps
let maplocalleader = "\\" "a prefix for mappings that only take effect for certain types of files

let $PYTHONPATH='/usr/lib/python3.6/site-packages'

set encoding=utf-8
set anti enc=utf-8
set guifont=InconsolataForPowerline\ Nerd\ Font\ 12
set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set number
set cursorline
set colorcolumn=80
set showbreak=↪
set t_Co=256


"""" Powerline
"python3 from powerline.vim import setup as powerline_setup
"python3 powerline_setup()
"python3 del powerline_setup
"let g:powerline_pycmd="py3"
"
"" Spell Check
"let b:myLang=0
"let g:myLangList=["nospell","en","fr","it","es"]
"function! ToggleSpell()
"	let b:myLang=b:myLang+1
"	if b:myLang>=len(g:myLangList) | let b:myLang=0 | endif
"	if b:myLang==0
"		setlocal nospell
"	else
"		execute "setlocal spell spelllang=".get(g:myLangList, b:myLang)
"	endif
"	echo "spell checking language:" g:myLangList[b:myLang]
"endfunction
"
"" autoreload vimrc
"augroup reload_vimrc " {
"    autocmd!
"    autocmd BufWritePost $MYVIMRC source $MYVIMRC
"augroup END " }
"
"
""""""""""""""""""""""""""""
"" Plugins configuration
""""""""""""""""""""""""""""
"
"" vim-easymotion
"map <Tab> <Plug>(easymotion-prefix)
"
"" vim-colors-solarized
"let g:solarized_termcolors= 16 	" 16 | 256,  256 degrades colors
"let g:solarized_termtrans = 0 	" 0 | 1
"let g:solarized_degrade = 0	" 0 | 1
"let g:solarized_bold = 1	" 1 | 0
"let g:solarized_underline = 1	" 1 | 0
"let g:solarized_italic = 1	" 1 | 0
"let g:solarized_contrast = "normal" 	" "normal"| "high" or "low"
"let g:solarized_visibility= "normal"	" "normal"| "high" or "low"
"if has('gui_running')
"    set background=light
"else
"    set background=dark
"endif
"colorscheme solarized
highlight Comment cterm=italic
"
"" nerdtree
"let g:NERDTreeWinPos = "right"
"let g:NERDTreeDirArrows=1
""autocmd vimenter * if !argc() | NERDTree | endif
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
"
"" vim-devicons
"let g:NERDTreeIndicatorMapCustom = {
"    \ "Modified"  : "✹",
"    \ "Staged"    : "✚",
"    \ "Untracked" : "✭",
"    \ "Renamed"   : "➜",
"    \ "Unmerged"  : "═",
"    \ "Deleted"   : "✖",
"    \ "Dirty"     : "✗",
"    \ "Clean"     : "✔︎",
"    \ 'Ignored'   : '☒',
"    \ "Unknown"   : "?"
"    \ }
"
"" YouCompleteMe
"augroup load_us_ycm
"	autocmd!
"	autocmd InsertEnter * call plug#load('ultisnips', 'vim-snippets', 'YouCompleteMe')
"		\| call youcompleteme#Enable() | autocmd! load_us_ycm
"augroup END
""let g:ycm_server_python_interpreter = "/usr/bin/python2"
"let g:ycm_server_python_interpreter = "/usr/bin/python"
"let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"
"let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']
""let g:ycm_server_keep_logfiles = 1
""let g:ycm_server_log_level = 'debug'
"" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
"
""" syntastic
""set statusline+=%#warningmsg#
""set statusline+=%{SyntasticStatuslineFlag()}
""set statusline+=%*
""let g:syntastic_python_python_exec = 'python3'
""let g:syntastic_always_populate_loc_list = 1
""let g:syntastic_auto_loc_list = 1
""let g:syntastic_check_on_open = 1
""let g:syntastic_check_on_wq = 0
"
"" ale (replace syntastic and flake8 in vim8)
"let g:ale_echo_msg_error_str = 'E'
"let g:ale_echo_msg_warning_str = 'W'
"let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"nmap <silent> <C-k> <Plug>(ale_previous_wrap)
"nmap <silent> <C-j> <Plug>(ale_next_wrap)
"" Set this. Airline will handle the rest.
"let g:airline#extensions#ale#enabled = 1
"
"" python-mode (do not erase .ropeproject directory)
"let g:pymode_python = 'python3'
"let g:pymode_options = 1
"
"" Gundo
"let g:gundo_prefer_python3 = 1
"
"" vim-fugitive
"augroup fugitive
"	autocmd!
"	autocmd BufReadPost fugitive://* set bufhidden=delete
"set diffopt+=vertical
"
"" vim-indent-guides
"let g:indent_guides_start_level = 2
"let g:indent_guides_guide_size = 1
"
"" vim-lastplace
"let g:lastplace_ignore = "gitcommit,svn"
"
"" vim-workspace
"let g:workspace_session_name = 'Session.vim'
"
"
""
"" Functions
""
"
"
"augroup SPACEVIM_ASYNCRUN
"    autocmd!
"    " Automatically open the quickfix window
"    autocmd User AsyncRunStart call asyncrun#quickfix_toggle(15, 1)
"augroup END
"
"function! s:compile_and_run()
"    exec 'w'
"    if &filetype == 'c'
"        exec "AsyncRun! gcc % -o %<; time ./%<"
"    elseif &filetype == 'cpp'
"       exec "AsyncRun! g++ -std=c++11 % -o %<; time ./%<"
"    elseif &filetype == 'java'
"       exec "AsyncRun! javac %; time java %<"
"    elseif &filetype == 'sh'
"       exec "AsyncRun! time bash %"
"    elseif &filetype == 'python'
"       exec "AsyncRun! time python %"
"    endif
"endfunction
"
"
"
""
"" FILES
""
""
"" Python files
"augroup programming_files
"	"autocmd FileType python map <buffer> <F3> :call Flake8()<CR>
"	autocmd FileType python,cpp,c,perl,tcl,shell,bash,zsh nmap <buffer> <F6> :ALEToggle<CR>
"	autocmd FileType python,cpp,c,perl,tcl nnoremap <F10> :call <SID>compile_and_run()<CR>
"	"autocmd FileType python nnoremap <buffer> <F10> :exec '!python' shellescape(@%, 1)<cr>
"	autocmd FileType python,cpp,c,perl,tcl :IndentGuidesEnable
"	autocmd FileType python,cpp,c,perl,tcli,shell,bash,zsh :ALEEnable
"	autocmd FileType python,cpp,shell,bash,zsh :TagbarOpen
""map <F4> :SyntasticToggleMode<CR>
"augroup END
"
"augroup text_files
"    autocmd!
"    autocmd FileType tex,latex,context,plaintex,text nmap <silent> <buffer> <F6> :call ToggleSpell()<CR>
""nmap <silent> <F6> :call ToggleSpell()<CR>
"augroup END
"
""
"" Mappings
""
"" :IndentGuidesToggle
"
"call togglebg#map("<F2>")
"nnoremap <silent> <F3> :GundoToggle<CR>
"map <silent> <F4> :NERDTreeToggle<CR>
"map <silent> <F5> :ToggleBufExplorer<CR>
""map <silent> <F6> USED by Spell, Syntax
"map <silent> <F7> :tabp<CR>
"map <silent> <F8> :tabn<CR>
"nmap <F9> :TagbarToggle<CR>
""map <silent> <F10> USED by exec
"set pastetoggle=<F12>
"
"nnoremap <localleader>s :ToggleWorkspace<CR>
"" }}}

" From the talk https://www.youtube.com/watch?v=XA2WjJbmmoM

" Recursivly add all files and folders to the path
set path+=**

" Display all matching files when we tab complete
set wildmenu

" Netrw config
let g:netrw_banner=0 " disable annoying banner

" Get that mouse goodness going
set mouse=a
" When running tmux, the escape sequence which provides the xterm version
" doesn't work, so we need to manually say that we can handle nice xterm2
" mouse features manually.
set ttymouse=xterm2

set clipboard=unnamedplus
" set clipboard=unnamed
