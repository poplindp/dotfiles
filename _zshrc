# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="robbyrussell"

# ZSH_THEME="powerline-theme/powerline"
# POWERLINE_RIGHT_A="mixed"
# POWERLINE_PATH="short"
# POWERLINE_SHOW_GIT_ON_RIGHT="true"
# POWERLINE_DETECT_SSH="true"

ZSH_THEME="powerlevel9k/powerlevel9k"
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_RPROMPT_ON_NEWLINE=true
#POWERLEVEL9K_COLOR_SCHEME='light'
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context node_version background_jobs dir vi_mode vcs virtualenv)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status history time)
POWERLEVEL9K_SHORTEN_DIR_LENGTH=3
POWERLEVEL9K_SHORTEN_DELIMITER=""
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
#POWERLEVEL9K_SHOW_CHANGESET=true
POWERLEVEL9K_VI_INSERT_MODE_STRING="I"
POWERLEVEL9K_VI_COMMAND_MODE_STRING="N"

#POWERLEVEL9K_CUSTOM_WIFI_SIGNAL="echo signal: \$(nmcli device wifi | awk '/^\*/ && !/SSID/ {print \$2}')"
#POWERLEVEL9K_CUSTOM_WIFI_SIGNAL_BACKGROUND="blue"
#POWERLEVEL9K_CUSTOM_WIFI_SIGNAL_FOREGROUND="yellow"


# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Uncomment this to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how often before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want to disable command autocorrection
# DISABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Uncomment following line if you want to disable marking untracked files under
# VCS as dirty. This makes repository status check for large repositories much,
# much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse tmuxinator)
plugins=(git battery colored-man-pages colorize history python themes vi-mode archlinux dircycle gpg-agent git-extras rand-quote taskwarrior tmux web-search Pass fasd tmuxinator)

source $ZSH/oh-my-zsh.sh

if [[ -r ~/.local/lib/python3.5/site-packages/powerline/bindings/zsh/powerline.zsh ]]; then
    source ~/.local/lib/python3.5/site-packages/powerline/bindings/zsh/powerline.zsh
fi

# Customize to your needs...

alias pacman_Hutch="http_proxy=http://10.38.2.10:3128 sudo -E pacman"
alias yaourt_Hutch="http_proxy=http://10.38.2.10:3128 https_proxy=http://10.38.2.10:3128 yaourt"

# ls *(<tab>  for options
setopt extendedglob
setopt nocaseglob

setopt AUTO_CD
export EDITOR="vim"
bindkey -v 

# vi style incremental search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward  


## do this or create .zprofile or .zlogin (http://zsh.sourceforge.net/Guide/zshguide02.html)
#if [[ -o login ]]
#then
#	xmodmap ${HOME}/.Xmodmap
#else
#	#do this and that
#fi


## MODULES  (FIXME: not using it later and have an error since
##	     /etc/profile.d/modules.XXsh uses export -f)
## source this (work around for DISPLAY problem  (WHAT WAS THIS????)
#source /etc/profile.d/modules.XXsh
#
##case "$0" in
##          -sh|sh|*/sh)	modules_shell=sh ;;
##       -ksh|ksh|*/ksh)	modules_shell=ksh ;;
##       -zsh|zsh|*/zsh)	modules_shell=zsh ;;
##    -bash|bash|*/bash)	modules_shell=bash ;;
##esac
##module() { eval `/usr/local/Modules/$MODULE_VERSION/bin/modulecmd $modules_shell $*`; }
###module() { eval `/bin/modulecmd $modules_shell $*`; }
#module() { eval `/usr/local/Modules/$MODULE_VERSION/bin/modulecmd zsh $*`; }

## Load necessary modules
#module load use.own


## Exports (local python and local dirs)
#PATH=${HOME}/.local/bin:${HOME}/bin:${HOME}/usr/bin:/usr/local/bin:${PATH}
PATH=${HOME}/.local/bin:${PATH}
# this shouldnt be used with envpython???
PYTHONPATH=${PYTHONPATH}:$HOME/.local/lib/python3.5/site-packages:$HOME/.local/lib/python2.7/site-packages
LD_LIBRARY_PATH=${HOME}/.local/lib:${LD_LIBRARY_PATH}


#### for programs installed in ${HOME}/usr... and lib64
#export PATH=${HOME}/usr/bin:/usr/lib64/openmpi/bin:${PATH}
#export LD_LIBRARY_PATH=/usr/lib64/openmpi/lib:/usr/lib64:/usr/lib:${LD_LIBRARY_PATH}
#LD_LIBRARY_PATH=${HOME}/usr/xc/lib:${LD_LIBRARY_PATH}

##### ASE (manual installation)
##PATH=${HOME}/usr/src/python-ase/tools:${PATH}
##PYTHONPATH=${HOME}/usr/src/python-ase:${PYTHONPATH}
#PATH=${HOME}/.local/bin:${PATH}

##### GPAW (developper installation)
#export GPAW_HOME=${HOME}/usr/src/gpaw
#export GPAW_PLATFORM=`python2 -c "from distutils import util, sysconfig; print util.get_platform()+'-'+sysconfig.get_python_version()"`
#PATH=${GPAW_HOME}/build/bin.${GPAW_PLATFORM}:${GPAW_HOME}/tools:${PATH}
#PYTHONPATH=${GPAW_HOME}/build/lib.${GPAW_PLATFORM}:${GPAW_HOME}:${PYTHONPATH}
#export GPAW_SETUP_PATH=${HOME}/usr/src/gpaw-setups
##export GPAW_PYTHON=/usr/bin

##### ASAP  (in any case, this should be done with the new property of AUTOENV
#export ASAP_HOME=${HOME}/usr/src/Asap
#export PATH=${ASAP_HOME}/x86_64:${PATH}
#export PYTHONPATH=${ASAP_HOME}/Python:${ASAP_HOME}/x86_64:${PYTHONPATH}
##
##
##### CULGI
##CULGI_PATH=/home/diego/local
#CULGI_PATH=/usr
#export CULGI_INSTALL_DIR=${CULGI_PATH}/share/Culgi
#export PATH=${CULGI_PATH}/bin:$PATH
#export PYTHONPATH=${CULGI_PATH}/lib/python2.7/site-packages:${PYTHONPATH}
#export LD_LIBRARY_PATH=${CULGI_PATH}/lib64:${LD_LIBRARY_PATH}
#

# THESE VARS I DEFINED IN ~/bin/CulgiGPE_babel

## for OpenBabel to work  (using rpmextract.sh OpenBabelForCulgi-2.3.2-el6.x86_64.rpm)
#OPENBABEL_PREFIX_INSTALL=/home/diego/usr/CulgiBabel/usr
#export LD_LIBRARY_PATH=${OPENBABEL_PREFIX_INSTALL}/lib64/:${LD_LIBRARY_PATH}
#export BABEL_LIBDIR=${OPENBABEL_PREFIX_INSTALL}/lib64//openbabel/2.3.2/
#export BABEL_DATADIR=${OPENBABEL_PREFIX_INSTALL}/share/openbabel/2.3.2/
#export PATH=${OPENBABEL_PREFIX_INSTALL}/bin/:${PATH}
#
#
##### ABINIT
#export ASE_ABINIT_COMMAND="mpirun -np 6 ${HOME}/usr/abinit/bin/abinit-mpi < PREFIX.files > PREFIX.log"
#PP=${HOME}/usr/src/abinit-pseudopotentials-2
#export ABINIT_PP_PATH=$PP/LDA_FHI
#export ABINIT_PP_PATH=$PP/GGA_FHI:$ABINIT_PP_PATH
#export ABINIT_PP_PATH=$PP/LDA_HGH:$ABINIT_PP_PATH
#export ABINIT_PP_PATH=$PP/LDA_PAW:$ABINIT_PP_PATH
#export ABINIT_PP_PATH=$PP/LDA_TM:$ABINIT_PP_PATH
#export ABINIT_PP_PATH=$PP/GGA_FHI:$ABINIT_PP_PATH
#export ABINIT_PP_PATH=$PP/GGA_HGHK:$ABINIT_PP_PATH
#
#### HOTBIT
#export HOTBIT_DIR="${HOME}/usr/hotbit/lib64/python" #the name "lib64" can vary
#export PATH="${HOME}/usr/hotbit:$PATH"
#export HOTBIT_PARAMETERS="${HOME}/usr/hotbit/param"
#export PYTHONPATH="$PYTHONPATH:$HOTBIT_DIR"
#
#export PATH=$PATH:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/games

#### LAMMPS
#export LAMMPS_COMMAND="mpirun --np 4 ${HOME}/usr/src/lammps/src/lmp_archlinux"

export PATH
export PYTHONPATH
export LD_LIBRARY_PATH

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
